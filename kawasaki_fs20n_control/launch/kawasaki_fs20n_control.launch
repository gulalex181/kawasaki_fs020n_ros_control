<launch>
    <!-- Load the URDF to the parameter server -->
    <param name="robot_description" textfile="$(find kawasaki_fs20n_description)/kawasaki_fs20n.urdf" />

    <!-- Launch RViz -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find kawasaki_fs20n_control)/config/rviz_config.rviz" />
    
    <!-- Load controller settings to parameter server -->
    <rosparam file="$(find kawasaki_fs20n_control)/config/kawasaki_fs20n_controllers.yaml" command="load" />

    <!-- Load connection to robot settings to parameter server -->
    <rosparam file="$(find kawasaki_fs20n_control)/config/connection.yaml" command="load" />

    <!-- Load hardware interface -->
    <node name="kawasaki_fs20n_hw_interface" pkg="kawasaki_fs20n_control" type="kawasaki_fs20n_hw_main" output="screen" />
    <!-- Load controller manager -->
    <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false"
    output="screen" args="spawn joint_state_controller position_trajectory_controller" />

    <!-- Convert joint states to /tf tranforms -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <!-- It will subscribe to the output of joint_state_controller and will update transformation tree dynamically -->

    <!-- MOVEIT -->

    <!-- Remap action that MoveIt suppose to call (/joint_trajectory_action) to the action that ros control creates (/position_trajectory_controller/follow_joint_trajectory) -->
    <!-- <remap from="/joint_trajectory_action" to="/position_trajectory_controller/follow_joint_trajectory"/> -->

    <include file="$(find kawasaki_fs20n_moveit)/launch/move_group.launch">
        <arg name="allow_trajectory_execution" value="true"/>
        <arg name="fake_execution" value="false"/>
        <arg name="info" value="true"/>
        <arg name="pipeline" value="ompl"/>
        <arg name="load_robot_description" value="true"/>
    </include>

</launch>